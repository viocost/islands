[[./kostia_2020_01_09_01.png]]


* Dir structure

Things to organize
1. binaries
2. apps
3. data
4. launchers
5. configuration
6. service scripts
   - Driver node.js script
   - App installer script
   - Sign verify scripts


** base_dir/
*** core
**** win32
***** tor
***** node
***** python
**** win64
***** tor
***** node
***** python
**** linux
***** bin
tor
python
redis
pip
npm
...
***** share
***** etc
***** ...

**** mac

***** bin
tor
python
redis
pip
npm
...
***** share
***** etc
***** ...

*** apps
**** engine
**** chat
**** red_wall

*** data
*** config
- torrc
- islands.conf
- ...
*** linux-run.sh
*** windows-run.bat
*** mac-run.sh

** Conversation log
8:20kostia
yes
Brian -- Otter8:21
Ie: cd ~/islandsData1/ ; ~/git/islands/release/launch.sh
8:21kostia
you mean launch island?
Brian -- Otter8:22
And when the Application Launcher launches chat, it would be _as if_ it did this: cd chat ; PATHTOISLANDS/apps/chat/entry.sh
Brian -- Otter8:22
Yes, I mean launch island.
Brian -- Otter8:22
This is why the launch script must setup the path for the binaries (including PYTHONPATH etc.)
8:22kostia
Yes, the script would go over config, check daemons, check all the installed apps
Brian -- Otter8:23
And why the Application Launcher _inside_ of Islands (in the core) that starts things like chat needs to _start them_ in the chat directory.
Brian -- Otter8:23
That 'script' is probably a node application that actually keeps all the program alive, and NONE of them running in daemon mode.
Brian -- Otter8:23
For instance, the tor executable. You don't want it going daemon.
Brian -- Otter8:23
You want it running "under" the Island entry program.
8:23kostia
huh?
Brian -- Otter8:24
Hmm.
8:24kostia
Tor not daemon?
Brian -- Otter8:24
Do NOT run any of those binaries as daemons.
8:22kostia
Yes, the script would go over config, check daemons, check all the installed apps
Brian -- Otter8:23
And why the Application Launcher _inside_ of Islands (in the core) that starts things like chat needs to _start them_ in the chat directory.
Brian -- Otter8:23
That 'script' is probably a node application that actually keeps all the program alive, and NONE of them running in daemon mode.
Brian -- Otter8:23
For instance, the tor executable. You don't want it going daemon.
Brian -- Otter8:23
You want it running "under" the Island entry program.
8:23kostia
huh?
Brian -- Otter8:24
Hmm.
8:24kostia
Tor not daemon?
Brian -- Otter8:24
Do NOT run any of those binaries as daemons.
8:24kostia
what about redis
Brian -- Otter8:24
All of them have switches to run as daemons or not. You do NOT want them running as daemons.
Brian -- Otter8:24
Not even redis. None of them.
8:24kostia
it is a daemon
Brian -- Otter8:24
It _can_ be a daemon. You don't want that.
8:24kostia
oh, good note
Brian -- Otter8:25
# By default Redis does not run as a daemon. Use 'yes' if you need it. # Note that Redis will write a pid file in /var/run/redis.pid when daemonized. daemonize yes
Brian -- Otter8:25
You don't want it as a daemon because ...
Brian -- Otter8:25
You want the node to run a _child proces_ for ech of them.
Brian -- Otter8:26
That means when they spit something out their stdout or stderr it goes into node.
Brian -- Otter8:26
So you can log it.
8:25kostia
and node will be the only daemon?
Brian -- Otter8:26
Further, if they _exit_ then you get notified that it exits.
Brian -- Otter8:26
Node is not a daemon either.
Brian -- Otter8:26
Not by default.
8:26kostia
I mean that node program that manages them?
8:26kostia
also not a daemon?
Brian -- Otter8:26
Remember how I said "let the icon call a bat file that launches an ugly cmd.exe window that closes when it exits?"
Brian -- Otter8:26
Right. NOT a daemon.
Brian -- Otter8:26
We can _allow_ it to go daemon, since some people will want that.
8:26kostia
ok
Brian -- Otter8:27
But it is NOT required to go daemon.
Brian -- Otter8:27
This is really important.
Brian -- Otter8:27
It is shockingly hard to test/interact with a daemon.
Brian -- Otter8:27
But it's easy to do so with a program that you invoke and it gives you a prompt that you can type commands into if you want.
Brian -- Otter8:27
Including EOF to exit...and then it stops all its children and exits.
Brian -- Otter8:27
No daemons.
Brian -- Otter8:28
Then you make THAT take a flag (like --daemon) and you can test easily but STILL add it to rc3.d if you want.
Brian -- Otter8:28
Or to Windows as a service. Or to Mac as a service.
8:27kostia
I need ti wrap my head around it:)
Brian -- Otter8:28
But the "key" is that you should be able to just invoke it and it runs _tying up_ that shell.
Brian -- Otter8:28
And it invokes things like redis, tor, etc., by running them as "child proceses" that detect when the child exits.
8:28kostia
so, you want to launch chat, what do you do? you hit the script that starts all the daemons, then your island is up, then you go to chat. After chatting you exit, all services are stopped?
Brian -- Otter8:29
So if tor or redis crash, the node says "Oh, weird, it crashed. If I am not shutting down, I better restart it."
Brian -- Otter8:29
Islands runs how many apps?
Brian -- Otter8:29
At once?
Brian -- Otter8:29
Islands is a pure server, right?
Brian -- Otter8:29
So you run Islands.
8:29kostia
all of them?
Brian -- Otter8:29
Any configured app is launched _as a child process_ in paralle.
Brian -- Otter8:29
Of ocures.
Brian -- Otter8:29
IF you don't launch chat, how can it be there collecting inbound messages until you connect your TOR browser?
Brian -- Otter8:30
Every app runs all the time.
Brian -- Otter8:30
The "apps" are the server-side. They also have JS _client side_ that is in the single-page app.
Brian -- Otter8:31
When islands is started, it starts all the "apps" and then it waits until someone tells it to shutdown. It's the _apps_ that actually cause Islands to do stuff.
8:32kostia
What if you want your island to be up all the time?
Brian -- Otter8:32
An interesting thing to write first ... a node library that lets you _launch_ an application, route its standard out to the screen (and its standard error to the screen) and to a file as well. And lets you type into the node app, and sends that into the running programs stdin.
Brian -- Otter8:32
Then you have your boot launch it as a daemon.
Brian -- Otter8:33
Hence the need for --daemon
Brian -- Otter8:33
But that's NOT how you want to debug it, is it?
8:33kostia
absolutely
Brian -- Otter8:33
Also, once you have that node library, you should be able to keep as MANY apps running as you want, not just one.

* App structure
App should consist of main script,  manifest and optional configuration file.

** Manifest structure
Manifest must be in JSON format
{
    "ManifestVersion": "1.0.0",
    "AppVersion": "1.0.0",
    "Interpriter": "node",  // can be node or python or none if it is standalone binary
    "Publisher": "<some public key hash>",
    "PublicKey": "some public key",
    "Signature": "signature",
    "Entry": "/path/to/entry"
    "Config": "/path/to/config"
    "Services": [
        "tor",
        "redis",
        ...
    ]


}

* Depricated
** Conversation log





7:47kostia
So, when we initially start the new island, that brings control admin page, that actually installs the chat app via provided manifest? And Island's owner can install any other apps this way?

Um, steps.

We install a new island.

Manager launches the VM, and starts a proxy so that localhost:8081/control-admin-page.html always works.

They bring up their browser to that page.

I expect that page to do "something" for security. We haven't even discussed it. But, assume that's done.
7:49kostia
Sure

They should be able to give magnet links to the torrent facility. They should be
able to see what torrents are known (and their percent downloaded or complete).
They should be able to see which torrents are Island App versions (metadata in
teh torrent file probably).

And they should be able to request an app be installed, which would cause upgrade or downgrade if what they pick already has a version running.

And they should be able to see which island apps are running, and stop and start
them.


That's the Island Software Installer (version install/upgrade/downgrade), the
Torrent Facility (list of torrents and status), and Application Launcher
(start/stop).

There may be other functions.

But, notice what this isn't?

It's not chat.

It's not the vault.

It doesn't have a TOR accessible single-page app.

If someone doesn't like the UX, changing it will take a whole new version of the Manager/VM.

The manager is ONLY needed if there's a VM. If there's no VM, then the browser can hit the control admin page directly just fine (because bare metal has a non-changing fixed IP).

If there IS a VM, the manager app does a PROXY for the browser that's localhost only. In this way, there's a fixed IP address for the bookmark. It's not _needed_, but without it, you'll need some way to find the VM's IP address.

All of this works with ZERO Island App installed.

Now, there should be a MUCH prettier admin app.

That lets you grant permissions to people to start/stop chat, or to bounce your island, etc.

That app does NOT re-write any torrent control stuff, though. It _asks_ the Torrent Facility to do Torrent stuff.
7:54kostia
I see.

It doesn't have a TOR accessible single-page app.

If someone doesn't like the UX, changing it will take a whole new version of the Manager/VM.

The manager is ONLY needed if there's a VM. If there's no VM, then the browser can hit the control admin page directly just fine (because bare metal has a non-changing fixed IP).

If there IS a VM, the manager app does a PROXY for the browser that's localhost only. In this way, there's a fixed IP address for the bookmark. It's not _needed_, but without it, you'll need some way to find the VM's IP address.

All of this works with ZERO Island App installed.

Now, there should be a MUCH prettier admin app.

That lets you grant permissions to people to start/stop chat, or to bounce your island, etc.

That app does NOT re-write any torrent control stuff, though. It _asks_ the Torrent Facility to do Torrent stuff.
7:54kostia
I see.

If you were to have both the Control Admin Page in your Firefox going, and the TOR Browser running the admin app, and you use the TOR Browser's app to request a new torrent then the Control Admin Page view would show the torrent suddenly appear and start downloading. Though not via something clever like WebSocket. Most likely through a simple meta-refresh every five seconds.

Because the control admin page is NOT an Island app. It's a control page for the Island Core's direct operation control.

It is _most likely_ that once the Admin app is installed, the user will NEVER hit the control admin page again.

However, even if TOR is down, the control admin page is up. So, fetching logs (to find out why TOR is down) or perhaps adding a new ssh key so you could log in to the Island VM itself could be done through the control admin page too.

Right now, in my condo, I've got an Island running.

There's no way for me to let you start hidden guest services. You have to ask me to add a guest if you wanted one.

The control admin page won't solve that.

Because it's local-host only.

You would be insane to "expose" it.

Even if you're running bare metal, you'll want your _firewall_ blocking access to that.

But, in the Island Admin App, we could enable delegation of permission. So I can _grant_ you the right to start/stop guest services YOU created.

The Island App would _delegate_ the actual request to the TOR system.

Actually, the control admin page wouldn't let you do that either. Those services are Chat App services.

So only the chat app's admin can do guest chat users.

We really need to break 'vault' and "chat" apart.

The hidden services are really exposing _vaults_.

They are key storage mechanisms.

But the UX is hooked to chat.

Even if you're running bare metal, you'll want your _firewall_ blocking access to that.

But, in the Island Admin App, we could enable delegation of permission. So I can _grant_ you the right to start/stop guest services YOU created.

The Island App would _delegate_ the actual request to the TOR system.

Actually, the control admin page wouldn't let you do that either. Those services are Chat App services.

So only the chat app's admin can do guest chat users.

We really need to break 'vault' and "chat" apart.

The hidden services are really exposing _vaults_.

They are key storage mechanisms.

But the UX is hooked to chat.

That's not correct. The chat UX should be able to "find" in the vault the chat-specific keys it needs.

We're just not there yet.

So, yeah, vault creation/destruction and hidden service links to vaults, that's stuff that should be possible in the control admin page.

But what's IN those vaults? The pretty views are part of the Island App.

There could be a vault browser/inspector. It would likely be a simple tree.

With branches like chat, file-transfer, muck, admin.

An under each branch a collection of keys/metadata.

The chat's channel selection page uses the vault to find the various keys under chat/.. and that's what drives the view you currently show.

But the core doesn't care ... the core only cares that a vault _file_ is associated with a hidden service onion address.

Zero or more onion addresses.

It doesn't care how the app that services that address works with what's in the vault.
8:04kostia
This diagram is super useful!

Hell, this is the unix model. Replace my "Island Core" with "Kernel." Replace my
facilities with "drivers baked into the kernel." Replace the launcher with
"hell."

And the apps are apps.

When you start Linux, it has a command line.

Only later does the X11 start.

X11 is our "single page apop."

Anyway, think on the diagram. I'm fading. It's late for me.

Zero or more onion addresses.

It doesn't care how the app that services that address works with what's in the vault.
8:04kostia
This diagram is super useful!

Hell, this is the unix model. Replace my "Island Core" with "Kernel." Replace my facilities with "drivers baked into the kernel." Replace the launcher with "shell."

And the apps are apps.

When you start Linux, it has a command line.

Only later does the X11 start.

X11 is our "single page apop."

Anyway, think on the diagram. I'm fading. It's late for me.
8:05kostia
did I tell you, that I recently switched to Arch linux ?

So I'm off to bed.

No, but ... I'm really glad I'm on OS X.
8:07kostia
Sure, I will study the diagram, think of it, compile everything in a design doc an upload it to github. This is extremely useful!
8:07kostia
Have a good night!

Don't make a detailed design doc.

Make a list of _what_ should be in the core.

Because everything that ends up "in the core" will come back to hurt us.
8:08kostia
I won't, I'll just make a dump of all your messages along with the diagram, think of it, maybe add some questinos
8:05kostia
did I tell you, that I recently switched to Arch linux ?

So I'm off to bed.

No, but ... I'm really glad I'm on OS X.
8:07kostia
Sure, I will study the diagram, think of it, compile everything in a design doc an upload it to github. This is extremely useful!
8:07kostia
Have a good night!

Don't make a detailed design doc.

Make a list of _what_ should be in the core.

Because everything that ends up "in the core" will come back to hurt us.
8:08kostia
I won't, I'll just make a dump of all your messages along with the diagram, think of it, maybe add some questinos
8:09kostia
yeah, adding vault and hidden service mmanagement to core increases the complexity
8:09kostia
maybe make it a "mandatory" app?

There are no mandator apps.

Think of X11.
8:10kostia
But it could be a "dependency" app

When you run Linux app to configure your computer ...

That app does NOT do things to the daemons.

It updates configuration files and _restarts_ the daemons.

You do NOT need X11 control panel to run your computer. Ever.
8:09kostia
yeah, adding vault and hidden service mmanagement to core increases the complexity
8:09kostia
maybe make it a "mandatory" app?

There are no mandator apps.

Think of X11.
8:10kostia
But it could be a "dependency" app

When you run Linux app to configure your computer ...

That app does NOT do things to the daemons.

It updates configuration files and _restarts_ the daemons.

You do NOT need X11 control panel to run your computer. Ever.

You don't need X11 at all.

The minute you _force_ X11 ... all hell breaks loose. You have Windows and OS X.

You can't run OS X without the UX.
8:11kostia
But you need X11 to run a window manager

You _can't_.

Right. But yuou don't need a window manager to run UNIX.

EVER.
8:11kostia
right
8:11kostia
So, chat needs vault and chat needs hidden service management. Could they all be apps that chat depends on?

The vault is actually a crypto secure block of storage that contains different blocks.

They aren't apops.

Apps.

The vault isn't an app.
8:12kostia
or they must be a part of the core?

It's a storage facility.
8:12kostia
ok

Services are a TOR facility. That's part of the core. Because TOR must be part of the core.

But, any "linking" of a vault to a hidden service is probably wrong.

Actually, no, it's right.
8:13kostia
Well, technically, anything can issue commands to tor control to launch or take down hidden service

Because the term hidden service is wrong.

There are "island app login services."

Those link to a vault.

Each login service is a "TOR hidden service" that hits the single-page app "thing" that is currently undefined and links to a (single) vault.

That's what it means to "login" to an island, after all. It means "go to the TOR onion that grants me access to my vault. All the apps on the island require the vault for their crypto needs."

The vault isn't a service. It's a storage item. You already have it as a storage item/tool. I don't think we're having a problem with the vault.

The mix-up is that when you hit the hidden service, that actually goes to _chat_ right now. NOT to the single-page app.

Because we don't _have_ the single page app.

But, INSIDE chat, when you create a topic, that _also_ creates a hidden service, right?

THAT hidden service is NOT able to be logged into and provide a single-page app. It's a data thing that carries messages specific to chat.
8:16kostia
Well, actually chat 2.0 design is a single page app that can be anything

Right, I think you need to flip that.

Islands 2.0 has a single-page JS app that lets ALL installed Islands apps be access through it.

Including chat.

The single page app is a "container" for the various views of ALL installed Islands apps that the user has access to run.
8:17kostia
Yes, I think it is really straight forward with current design, because it can fetch any data and build page components on fly

But there is no "it" in that diagram yet.

Our single-page app is X11.

And Chat is an X11 _app_.

And our core is the Kernel.

We have no Window Manager yet.

Right now, our X11 and Window Manager are "kinda linked."

BOTH of those need to be on the Island App side. NOT in the core.

Or we can't update our UX without a VM/Manager release.

Remember: everything in the core means pain.
8:20kostia
I see... Well, core has to be built first anyway

Yes, desperately first. So we can get it installed (and an installer that works with Windows, Mac, and lets David play with bare metal and perhaps EC2).

OUta here.
